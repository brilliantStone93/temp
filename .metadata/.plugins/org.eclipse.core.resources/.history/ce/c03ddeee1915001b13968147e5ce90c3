package network;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.List;

public class ChatHandlerObject extends Thread{
	private Socket socket;
	private List<ChatHandlerObject> list;
	private ObjectInputStream oi;
	private ObjectOutputStream oo ;
	private InfoDTO dto;
	
	
	public ChatHandlerObject (Socket socket, List<ChatHandlerObject> list) throws IOException {
		this.socket = socket;
		this.list = list;
		
		oi = new ObjectInputStream(socket.getInputStream());
		oo = new ObjectOutputStream(socket.getOutputStream());
		
		try {
			dto = (InfoDTO)oi.readObject();
			
		} catch (ClassNotFoundException e) {
			
			e.printStackTrace();
		} catch (IOException e) {
			
			e.printStackTrace();
		}
		
	}
	
	
	@Override
	public void run() {
		
		
			
			
			
		
			
			broadcast(nickName + "님 입장하였습니다",dto);
			
			while(true) {
				//닉네임 받는쪽
				try {
					if(dto.getCommeand() == Info.JOIN) {
						broadcast(dto);
					}
					else if(dto.getCommeand() == Info.EXIT) {
							break; 
							oi.close();
							oo.close();
							socket.close();
					}
					else if(dto.getCommeand() == Info.SEND) {
						broadcast(dto);
					}
				} catch (IOException e) {
					e.printStackTrace();
				}
	
			}//while
		
	}//run
	
	public void broadcast(InfoDTO dto) throws IOException {//다른사람들에게 메세지 뿌려주는 메소드
		for(ChatHandlerObject ch : list) {
			ch.oo.writeObject(dto);
			ch.oo.flush();
		}
		
		
		
	}//boradcast
}

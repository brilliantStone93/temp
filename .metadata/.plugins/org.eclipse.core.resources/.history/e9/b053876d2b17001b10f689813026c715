package network;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.List;

public class ChatHandlerObject extends Thread{
	private Socket socket;
	private List<ChatHandlerObject> list;
	
	private ObjectOutputStream oo ;
	private ObjectInputStream oi;
	
	
	
	
	
	public ChatHandlerObject (Socket socket, List<ChatHandlerObject> list) throws IOException {
		this.socket = socket;
		this.list = list;
		
		oo = new ObjectOutputStream(socket.getOutputStream());
		oi = new ObjectInputStream(socket.getInputStream());
		//oi가 먼저 잡히면 쓰레드가 메세지를 잡지 못한다
		// 따라서 출력을 먼저 잡아줘야한다.

	}// 생성자
	
	
	@Override
	public void run() {
		 
		
			
		
			//닉네임 받는쪽
		try {
			
			while(true) {	
				InfoDTO dto = (InfoDTO)oi.readObject();
				InfoDTO dto2 = new InfoDTO();
				if(dto.getCommeand() == Info.JOIN) {
					dto2.setNickName(dto.getNickName());
					dto2.setMessage("님 입장하였습니다");
					broadcast(dto2);
				}
				else if(dto.getCommeand() == Info.EXIT) {
					dto2.setNickName(dto.getNickName());
					dto2.setMessage("님 퇴장하였습니다");
					broadcast(dto2);
					break; 
				}
				else if(dto.getCommeand() == Info.SEND) {
					dto2.setNickName(dto.getNickName());
					dto2.setMessage(dto.getMessage());
					broadcast(dto2);
					
				}
			}//while
			
			list.remove(this);
			
			oi.close();
			oo.close();
			socket.close();
		} catch (IOException | ClassNotFoundException e) {
			e.printStackTrace();
		}

	
	
		
	}//run
	
	public void broadcast(InfoDTO dto) {//다른사람들에게 메세지 뿌려주는 메소드
		for(ChatHandlerObject ch : list) {
			try {
				ch.oo.writeObject(dto);
				ch.oo.flush();
			
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		
		}
		
	}//boradcast
}
